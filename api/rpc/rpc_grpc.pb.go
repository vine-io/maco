//
//Copyright 2025 The maco Authors
//
//This program is offered under a commercial and under the AGPL license.
//For AGPL licensing, see below.
//
//AGPL licensing:
//This program is free software: you can redistribute it and/or modify
//it under the terms of the GNU Affero General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU Affero General Public License for more details.
//
//You should have received a copy of the GNU Affero General Public License
//along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: api/rpc/rpc.proto

package macopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MacoRPC_Ping_FullMethodName     = "/rpc.macopb.MacoRPC/Ping"
	MacoRPC_Dispatch_FullMethodName = "/rpc.macopb.MacoRPC/Dispatch"
)

// MacoRPCClient is the client API for MacoRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MacoRPCClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Dispatch(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DispatchRequest, DispatchResponse], error)
}

type macoRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMacoRPCClient(cc grpc.ClientConnInterface) MacoRPCClient {
	return &macoRPCClient{cc}
}

func (c *macoRPCClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, MacoRPC_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macoRPCClient) Dispatch(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DispatchRequest, DispatchResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MacoRPC_ServiceDesc.Streams[0], MacoRPC_Dispatch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DispatchRequest, DispatchResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MacoRPC_DispatchClient = grpc.BidiStreamingClient[DispatchRequest, DispatchResponse]

// MacoRPCServer is the server API for MacoRPC service.
// All implementations must embed UnimplementedMacoRPCServer
// for forward compatibility.
type MacoRPCServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Dispatch(grpc.BidiStreamingServer[DispatchRequest, DispatchResponse]) error
	mustEmbedUnimplementedMacoRPCServer()
}

// UnimplementedMacoRPCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMacoRPCServer struct{}

func (UnimplementedMacoRPCServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMacoRPCServer) Dispatch(grpc.BidiStreamingServer[DispatchRequest, DispatchResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Dispatch not implemented")
}
func (UnimplementedMacoRPCServer) mustEmbedUnimplementedMacoRPCServer() {}
func (UnimplementedMacoRPCServer) testEmbeddedByValue()                 {}

// UnsafeMacoRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MacoRPCServer will
// result in compilation errors.
type UnsafeMacoRPCServer interface {
	mustEmbedUnimplementedMacoRPCServer()
}

func RegisterMacoRPCServer(s grpc.ServiceRegistrar, srv MacoRPCServer) {
	// If the following call pancis, it indicates UnimplementedMacoRPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MacoRPC_ServiceDesc, srv)
}

func _MacoRPC_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacoRPCServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MacoRPC_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacoRPCServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MacoRPC_Dispatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MacoRPCServer).Dispatch(&grpc.GenericServerStream[DispatchRequest, DispatchResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MacoRPC_DispatchServer = grpc.BidiStreamingServer[DispatchRequest, DispatchResponse]

// MacoRPC_ServiceDesc is the grpc.ServiceDesc for MacoRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MacoRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.macopb.MacoRPC",
	HandlerType: (*MacoRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _MacoRPC_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Dispatch",
			Handler:       _MacoRPC_Dispatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/rpc/rpc.proto",
}
