/*
Copyright 2025 The maco Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto3";

package rpc.macopb;

import "api/types/internal.proto";
// for grpc-gateway
import "google/api/annotations.proto";
// for openapi
import "openapi/v3/annotations.proto";

option go_package = "github.com/vine-io/maco/api/rpc/macopb;macopb";
option java_multiple_files = true;
option java_package = "io.vine.maco.api.rpc.macopb";
option java_outer_classname = "MacoRPCPb";

service MacoRPC {
  rpc Ping(PingRequest) returns (PingResponse) {
    option (google.api.http) = {
      get: "/v1/ping"
    };

//    option (openapi.v3.operation) = {
//      security: [
//        {
//          additional_properties: {
//            name: "bearerAuth",
//            value: {
//              value: ["User:register"],
//            }
//          }
//        }
//      ]
//    };
  }

  rpc Call(CallRequest) returns (CallResponse) {
    option (google.api.http) = {
      get: "/v1/call"
    };
  };
}

message PingRequest {}

message PingResponse {
  string message = 1;
}

message CallRequest {
  repeated string hosts = 1;
  string function = 2;
  map<string, types.Value> args = 3;
}

message CallResponse {

}

service InternalRPC {
  rpc Dispatch(stream DispatchRequest) returns (stream DispatchResponse);
}

message DispatchRequest {
  types.EventType type = 1;
  types.ConnectRequest connect = 2;
  types.CallResponse call = 3;
}

message DispatchResponse {
  types.EventType type = 1;
  types.ConnectResponse connect = 2;
  types.CallRequest call = 3;
}
