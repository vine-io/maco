/*
Copyright 2025 The maco Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto3";

package rpc.macopb;

import "api/types/internal.proto";
// for grpc-gateway
import "google/api/annotations.proto";
// for openapi
import "openapi/v3/annotations.proto";

option go_package = "github.com/vine-io/maco/api/rpc/macopb;macopb";
option java_multiple_files = true;
option java_package = "io.vine.maco.api.rpc.macopb";
option java_outer_classname = "MacoRPCPb";

service MacoRPC {
  rpc Ping(PingRequest) returns (PingResponse) {
    option (google.api.http) = {
      get: "/v1/ping"
    };
  }

  rpc ListMinions(ListMinionsRequest) returns (ListMinionsResponse) {
    option (google.api.http) = {
      get: "/v1/minions"
    };

    option (openapi.v3.operation) = {
      security: [
        {
          additional_properties: {
            name: "bearerAuth",
            value: {},
          }
        }
      ]
    };
  };

  rpc GetMinion(GetMinionRequest) returns (GetMinionResponse) {
    option (google.api.http) = {
      get: "/v1/minion/{name}"
    };

    option (openapi.v3.operation) = {
      security: [
        {
          additional_properties: {
            name: "bearerAuth",
            value: {},
          }
        }
      ]
    };
  };

  rpc AcceptMinion(AcceptMinionRequest) returns (AcceptMinionResponse) {
    option (google.api.http) = {
      post: "/v1/minions/action/accept"
      body: "*"
    };

    option (openapi.v3.operation) = {
      security: [
        {
          additional_properties: {
            name: "bearerAuth",
            value: {},
          }
        }
      ]
    };
  }

  rpc RejectMinion(RejectMinionRequest) returns (RejectMinionResponse) {
    option (google.api.http) = {
      post: "/v1/minions/action/reject"
      body: "*"
    };

    option (openapi.v3.operation) = {
      security: [
        {
          additional_properties: {
            name: "bearerAuth",
            value: {},
          }
        }
      ]
    };
  }

  rpc PrintMinion(PrintMinionRequest) returns (PrintMinionResponse) {
    option (google.api.http) = {
      post: "/v1/minions/action/print"
      body: "*"
    };

    option (openapi.v3.operation) = {
      security: [
        {
          additional_properties: {
            name: "bearerAuth",
            value: {},
          }
        }
      ]
    };
  }

  rpc DeleteMinion(DeleteMinionRequest) returns (DeleteMinionResponse) {
    option (google.api.http) = {
      post: "/v1/minions/action/delete"
      body: "*"
    };

    option (openapi.v3.operation) = {
      security: [
        {
          additional_properties: {
            name: "bearerAuth",
            value: {},
          }
        }
      ]
    };
  }

  rpc Call(CallRequest) returns (CallResponse) {
    option (google.api.http) = {
      post: "/v1/call"
      body: "*"
    };

    option (openapi.v3.operation) = {
      security: [
        {
          additional_properties: {
            name: "bearerAuth",
            value: {},
          }
        }
      ]
    };
  };
}

message PingRequest {}

message PingResponse {}

message ListMinionsRequest {
  repeated string stateList = 1;
}

message ListMinionsResponse {
  repeated string unaccepted = 1;
  repeated string accepted = 2;
  repeated string autoSign = 3;
  repeated string denied = 4;
  repeated string rejected = 5;
}

message GetMinionRequest {
  string name = 1;
}

message GetMinionResponse {
  types.MinionKey minion = 1;
}

message AcceptMinionRequest {
  repeated string minions = 1;
  bool all = 2;
  bool includeRejected = 3;
  bool includeDenied = 4;
}

message AcceptMinionResponse {
  repeated string minions = 1;
}

message RejectMinionRequest {
  repeated string minions = 1;
  bool all = 2;
  bool includeAccepted = 3;
  bool includeDenied = 4;
}

message RejectMinionResponse {
  repeated string minions = 1;
}

message PrintMinionRequest {
  repeated string minions = 1;
  bool all = 2;
}

message PrintMinionResponse {
  repeated types.MinionKey minions = 1;
}

message DeleteMinionRequest {
  repeated string minions = 1;
  bool all = 2;
}

message DeleteMinionResponse {
  repeated string minions = 1;
}

message CallRequest {
  types.CallRequest request = 1;
}

message CallResponse {
  types.Report report = 1;
}

service InternalRPC {
  rpc Dispatch(stream DispatchRequest) returns (stream DispatchResponse);
}

message DispatchCallMsg {
  uint64 id = 1;
  bytes data = 2;
  string error = 3;
}

message DispatchRequest {
  types.EventType type = 1;
  types.ConnectRequest connect = 2;
  DispatchCallMsg call = 3;
}

message DispatchResponse {
  types.EventType type = 1;
  types.ConnectResponse connect = 2;
  DispatchCallMsg call = 3;
}
